{"version":3,"sources":["Card.js","Top.js","App.js","index.js"],"names":["días","Card","fecha","tempMax","tempMin","icon","className","Date","getDay","getWeekDay","src","alt","Top","current","location","weather","temp","city_name","country_code","max_temp","min_temp","rh","App","props","state","forecast","isLoaded","a","fetch","response","json","result","console","log","data","shift","state_code","this","setState","map","dia","i","valid_date","parseInt","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAEMA,EAAO,CAAC,QAAS,SAAU,eAAa,SAAU,UAAW,YAAU,WA0B9DC,EAvBF,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,MAAMC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KAInC,OACI,sBAAKC,UAAU,OAAf,UACA,6BALe,SAACJ,GAChB,OAAOF,EAAK,IAAIO,KAAKL,GAAOM,UAIvBC,CAAWP,KAChB,6BAAKA,IACL,qBAAKQ,IAAG,kBAAaL,EAAb,QAAyBM,IAAI,eAAeL,UAAU,gBAC9D,sBAAKA,UAAU,SAAf,UACI,8BACI,sBAAMA,UAAU,YACfH,EAFL,UAIA,8BACI,sBAAMG,UAAU,YACfF,EAFL,iBCNGQ,G,MAXH,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SACnB,OACI,sBAAKR,UAAU,MAAf,UACA,qBAAKI,IAAG,kBAAaG,EAAQE,QAAQV,KAA7B,QAAyCM,IAAI,kBAAkBL,UAAU,UACjF,mBAAGA,UAAU,OAAb,SAAqBO,EAAQG,OAC7B,qBAAIV,UAAU,OAAd,UAAsBQ,EAASG,UAA/B,KAA4CH,EAASI,gBACrD,sBAAKZ,UAAU,SAAf,kBAA8BO,EAAQM,SAAtC,gBAA0DN,EAAQO,SAAlE,cAAoFP,EAAQQ,GAA5F,aC6EOC,E,kDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXX,QAAS,GACTY,SAAU,GACVX,SAAU,GACVY,UAAU,GANK,E,4FAYnB,oCAAAC,EAAA,+EAEyBC,MAAM,mKAF/B,cAEQC,EAFR,gBAOuBA,EAASC,OAPhC,OAOQC,EAPR,OAQIC,QAAQC,IAAIF,GACNlB,EAAUkB,EAAOG,KAAKC,QACtBV,EAAWM,EAAOG,KAElBpB,EAAW,CACfG,UAAWc,EAAOd,UAClBC,aAAca,EAAOb,aACrBkB,WAAYL,EAAOK,YAErBC,KAAKC,SACH,CACEzB,UACAY,WACAX,WACAY,UAAU,IAtBlB,kDA0BIM,QAAQC,IAAR,MA1BJ,0D,0EA8BA,WAAU,IAAD,EAE2CI,KAAKb,MAA/CX,EAFD,EAECA,QAASY,EAFV,EAEUA,SAAUX,EAFpB,EAEoBA,SAE3B,OAJO,EAE8BY,SAGnC,qBAAKpB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACC,cAAC,EAAD,CACCO,QAAWA,EACXC,SAAYA,IAEZ,qBAAKR,UAAU,SAAf,SAEImB,EAASc,KAAI,SAACC,EAAKC,GACjB,OACE,cAAC,EAAD,CAEEvC,MAASsC,EAAIE,WACbvC,QAAWwC,SAASH,EAAIrB,UACxBf,QAAWuC,SAASH,EAAIpB,UACxBf,KAAQmC,EAAIzB,QAAQV,MAJfoC,aAanB,qBAAKnC,UAAU,GAAf,6B,GAzEYsC,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7e52e7f6.chunk.js","sourcesContent":["import React from 'react';\n\nconst días = [\"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\", \"Sábado\", \"Domingo\"]\n\n\nconst Card = ({fecha,tempMax, tempMin, icon}) => {\n    const getWeekDay = (fecha) => {\n        return días[new Date(fecha).getDay()]\n      }\n    return (\n        <div className=\"card\">\n        <h5>{getWeekDay(fecha)}</h5>\n        <h6>{fecha}</h6>\n        <img src={`./icons/${icon}.png`} alt=\"Clima diario\" className=\"imagebottom\" />\n        <div className=\"minmax\">\n            <p>\n                <span className=\"tempmax\" />\n                {tempMax}°\n            </p>\n            <p>\n                <span className=\"tempmin\" />\n                {tempMin}°\n            </p>\n        </div>\n    </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\n\nconst Top = ({current, location}) => {\n    return (\n        <div className=\"top\">\n        <img src={`./icons/${current.weather.icon}.png`} alt=\"Clima principal\" className=\"image\" />\n        <p className=\"temp\">{current.temp}</p>\n        <h2 className=\"city\">{location.city_name}, {location.country_code}</h2>\n        <div className=\"temphr\">Max: {current.max_temp} °C, Min: {current.min_temp} °C, H: {current.rh} %</div>\n      </div>\n    );\n}\n\nexport default Top;\n","import React, { Component } from \"react\";\nimport Card from './Card';\nimport \"./App.css\";\nimport Top from \"./Top\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: {},\n      forecast: [],\n      location: {},\n      isLoaded: false,\n    }\n  }\n\n \n\n  async componentDidMount() {\n    try {\n      let response = await fetch(`\n\n      https://api.weatherbit.io/v2.0/forecast/daily?country=argentina&lang=es&city=Buenos+Aires&key=85646c15983f476390bd69fe92455431&days=7\n      \n      `)\n      let result = await response.json();\n      console.log(result)\n      const current = result.data.shift(); //el día actual\n      const forecast = result.data; //los días siguientes (por defecto 6)\n\n      const location = {\n        city_name: result.city_name,\n        country_code: result.country_code,\n        state_code: result.state_code,\n      }\n      this.setState(\n        {\n          current,\n          forecast,\n          location,\n          isLoaded: true\n        }\n      )\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  render() {\n\n    const { current, forecast, location, isLoaded } = this.state;\n\n    return isLoaded ? (\n      <div className=\"App\">\n        <div className=\"container\">\n         <Top\n          current = {current}\n          location = {location}\n         />\n          <div className=\"bottom\">\n            {\n              forecast.map((dia, i) => {\n                return (\n                  <Card\n                    key={i}\n                    fecha = {dia.valid_date}\n                    tempMax = {parseInt(dia.max_temp)}\n                    tempMin = {parseInt(dia.min_temp)}\n                    icon = {dia.weather.icon}\n                  />\n                )\n              })\n            }\n          </div>\n        </div>\n      </div>\n    ) : (\n      <div className=\"\">\n        Cargando...\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}